// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// as_sudoku_df
IntegerMatrix as_sudoku_df(IntegerVector values, IntegerVector row, IntegerVector col, IntegerVector box);
RcppExport SEXP _sudokuplyr_as_sudoku_df(SEXP valuesSEXP, SEXP rowSEXP, SEXP colSEXP, SEXP boxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type row(rowSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type col(colSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type box(boxSEXP);
    rcpp_result_gen = Rcpp::wrap(as_sudoku_df(values, row, col, box));
    return rcpp_result_gen;
END_RCPP
}
// can_bes_getter_index
IntegerVector can_bes_getter_index(IntegerMatrix& sudoku_df, IntegerVector& nums, IntegerVector ind_list);
RcppExport SEXP _sudokuplyr_can_bes_getter_index(SEXP sudoku_dfSEXP, SEXP numsSEXP, SEXP ind_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type sudoku_df(sudoku_dfSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ind_list(ind_listSEXP);
    rcpp_result_gen = Rcpp::wrap(can_bes_getter_index(sudoku_df, nums, ind_list));
    return rcpp_result_gen;
END_RCPP
}
// cant_bes_getter
List cant_bes_getter(IntegerMatrix sudoku_df);
RcppExport SEXP _sudokuplyr_cant_bes_getter(SEXP sudoku_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type sudoku_df(sudoku_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(cant_bes_getter(sudoku_df));
    return rcpp_result_gen;
END_RCPP
}
// cant_bes_lengths
IntegerMatrix cant_bes_lengths(IntegerMatrix sudoku_df, List cant_bes, IntegerVector nums);
RcppExport SEXP _sudokuplyr_cant_bes_lengths(SEXP sudoku_dfSEXP, SEXP cant_besSEXP, SEXP numsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type sudoku_df(sudoku_dfSEXP);
    Rcpp::traits::input_parameter< List >::type cant_bes(cant_besSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nums(numsSEXP);
    rcpp_result_gen = Rcpp::wrap(cant_bes_lengths(sudoku_df, cant_bes, nums));
    return rcpp_result_gen;
END_RCPP
}
// count_naked_singles
int count_naked_singles(IntegerMatrix sudoku_df, List cant_bes);
RcppExport SEXP _sudokuplyr_count_naked_singles(SEXP sudoku_dfSEXP, SEXP cant_besSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type sudoku_df(sudoku_dfSEXP);
    Rcpp::traits::input_parameter< List >::type cant_bes(cant_besSEXP);
    rcpp_result_gen = Rcpp::wrap(count_naked_singles(sudoku_df, cant_bes));
    return rcpp_result_gen;
END_RCPP
}
// check_integrity
bool check_integrity(IntegerMatrix sudoku_df, IntegerVector nums);
RcppExport SEXP _sudokuplyr_check_integrity(SEXP sudoku_dfSEXP, SEXP numsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type sudoku_df(sudoku_dfSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nums(numsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_integrity(sudoku_df, nums));
    return rcpp_result_gen;
END_RCPP
}
// element_checker
IntegerMatrix element_checker(IntegerMatrix sudoku_df, List cant_bes, int dimension);
RcppExport SEXP _sudokuplyr_element_checker(SEXP sudoku_dfSEXP, SEXP cant_besSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type sudoku_df(sudoku_dfSEXP);
    Rcpp::traits::input_parameter< List >::type cant_bes(cant_besSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(element_checker(sudoku_df, cant_bes, dimension));
    return rcpp_result_gen;
END_RCPP
}
// num_empties
int num_empties(IntegerMatrix sudoku_df);
RcppExport SEXP _sudokuplyr_num_empties(SEXP sudoku_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type sudoku_df(sudoku_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(num_empties(sudoku_df));
    return rcpp_result_gen;
END_RCPP
}
// logical_solver
IntegerMatrix logical_solver(IntegerMatrix sudoku_df, bool verbose, IntegerVector nums);
RcppExport SEXP _sudokuplyr_logical_solver(SEXP sudoku_dfSEXP, SEXP verboseSEXP, SEXP numsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type sudoku_df(sudoku_dfSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nums(numsSEXP);
    rcpp_result_gen = Rcpp::wrap(logical_solver(sudoku_df, verbose, nums));
    return rcpp_result_gen;
END_RCPP
}
// count_hidden_singles
int count_hidden_singles(IntegerMatrix& sudoku_df);
RcppExport SEXP _sudokuplyr_count_hidden_singles(SEXP sudoku_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type sudoku_df(sudoku_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(count_hidden_singles(sudoku_df));
    return rcpp_result_gen;
END_RCPP
}
// solve_backtracking
bool solve_backtracking(IntegerMatrix& sudoku_df, IntegerVector& empties, bool& verbose, IntegerVector& nums, List ind_list, bool shuffle);
RcppExport SEXP _sudokuplyr_solve_backtracking(SEXP sudoku_dfSEXP, SEXP emptiesSEXP, SEXP verboseSEXP, SEXP numsSEXP, SEXP ind_listSEXP, SEXP shuffleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type sudoku_df(sudoku_dfSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type empties(emptiesSEXP);
    Rcpp::traits::input_parameter< bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< List >::type ind_list(ind_listSEXP);
    Rcpp::traits::input_parameter< bool >::type shuffle(shuffleSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_backtracking(sudoku_df, empties, verbose, nums, ind_list, shuffle));
    return rcpp_result_gen;
END_RCPP
}
// solve_backtracking_all
List solve_backtracking_all(IntegerMatrix& sudoku_df, IntegerVector& empties, bool& verbose, IntegerVector& nums, List ind_list, bool shuffle, int& counter, List& out, bool stop_early);
RcppExport SEXP _sudokuplyr_solve_backtracking_all(SEXP sudoku_dfSEXP, SEXP emptiesSEXP, SEXP verboseSEXP, SEXP numsSEXP, SEXP ind_listSEXP, SEXP shuffleSEXP, SEXP counterSEXP, SEXP outSEXP, SEXP stop_earlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type sudoku_df(sudoku_dfSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type empties(emptiesSEXP);
    Rcpp::traits::input_parameter< bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< List >::type ind_list(ind_listSEXP);
    Rcpp::traits::input_parameter< bool >::type shuffle(shuffleSEXP);
    Rcpp::traits::input_parameter< int& >::type counter(counterSEXP);
    Rcpp::traits::input_parameter< List& >::type out(outSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_early(stop_earlySEXP);
    rcpp_result_gen = Rcpp::wrap(solve_backtracking_all(sudoku_df, empties, verbose, nums, ind_list, shuffle, counter, out, stop_early));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sudokuplyr_as_sudoku_df", (DL_FUNC) &_sudokuplyr_as_sudoku_df, 4},
    {"_sudokuplyr_can_bes_getter_index", (DL_FUNC) &_sudokuplyr_can_bes_getter_index, 3},
    {"_sudokuplyr_cant_bes_getter", (DL_FUNC) &_sudokuplyr_cant_bes_getter, 1},
    {"_sudokuplyr_cant_bes_lengths", (DL_FUNC) &_sudokuplyr_cant_bes_lengths, 3},
    {"_sudokuplyr_count_naked_singles", (DL_FUNC) &_sudokuplyr_count_naked_singles, 2},
    {"_sudokuplyr_check_integrity", (DL_FUNC) &_sudokuplyr_check_integrity, 2},
    {"_sudokuplyr_element_checker", (DL_FUNC) &_sudokuplyr_element_checker, 3},
    {"_sudokuplyr_num_empties", (DL_FUNC) &_sudokuplyr_num_empties, 1},
    {"_sudokuplyr_logical_solver", (DL_FUNC) &_sudokuplyr_logical_solver, 3},
    {"_sudokuplyr_count_hidden_singles", (DL_FUNC) &_sudokuplyr_count_hidden_singles, 1},
    {"_sudokuplyr_solve_backtracking", (DL_FUNC) &_sudokuplyr_solve_backtracking, 6},
    {"_sudokuplyr_solve_backtracking_all", (DL_FUNC) &_sudokuplyr_solve_backtracking_all, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_sudokuplyr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
